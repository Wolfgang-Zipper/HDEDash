import fetch from 'node-fetch';
global.Headers = fetch.Headers;
let url = "https://omni.cp.ru/"
const token = "==";
let userTickets = {};
let userTicketsGrafana = "";

async function reqHde(endpoint, param, offset = 1) {
  try {
    const response_objects = [];
    const response = await fetch(`${url}api/v2/${endpoint}/?page=${offset}${param}`, {
      method: "GET",
      headers: {
        "Authorization": `Basic ${token}`,
      }
    });
    if (response.ok) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–º
      const r = await response.json();
      for (let key in r.data) {
        response_objects.push(r.data[key]);
      }
      if (r.pagination && r.pagination.total_pages > offset) {
        return response_objects.concat(await reqHde(endpoint, param, offset + 1));
      } else {
        return response_objects;
      }
    }

    else {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);

    }
  } catch (err) {
    console.log(err);
  }
}

function translit(word) {
  var answer = '';
  var converter = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd',
    '–µ': 'e', '—ë': 'e', '–∂': 'zh', '–∑': 'z', '–∏': 'i',
    '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', '–Ω': 'n',
    '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't',
    '—É': 'u', '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch',
    '—à': 'sh', '—â': 'sch', '—å': '', '—ã': 'y', '—ä': '',
    '—ç': 'e', '—é': 'yu', '—è': 'ya', '': 'i',

    '–ê': 'a', '–ë': 'b', '–í': 'v', '–ì': 'g', '–î': 'd',
    '–ï': 'e', '–Å': 'e', '–ñ': 'zh', '–ó': 'z', '–ò': 'i',
    '–ô': 'y', '–ö': 'k', '–õ': 'l', '–ú': 'm', '–ù': 'n',
    '–û': 'o', '–ü': 'p', '–†': 'r', '–°': 's', '–¢': 't',
    '–£': 'u', '–§': 'f', '–•': 'h', '–¶': 'c', '–ß': 'ch',
    '–®': 'sh', '–©': 'sch', '–¨': '', '–´': 'y', '–™': '',
    '–≠': 'e', '–Æ': 'yu', '–Ø': 'ya', ' ': '_'
  }
  for (var i = 0; i < word.length; ++i) {
    if (converter[word[i]] == undefined) {
      answer += word[i];
    } else {
      answer += converter[word[i]];
    }
  }

  return answer.replace(/\u0301/g, "");
}

async function main() {

  const users = await reqHde("users", "&group_list=29");

  const tickets = await reqHde("tickets", "&search=–û—Ç–¥–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏&status_list=open,v-processe,6");

  for (let i = 0; i < users.length; i++) {
    userTickets[users[i].id] =
    {
      name: `${users[i].name} ${users[i].lastname}`,
      user_status: `${users[i].user_status}` == 'offline' ? '' : 'üü¢',
      ticketCount: 0,
      open: 0,
      inwork: 0,
      waiting: 0
    }
  }

  for (let i = 0; i < tickets.length; i++) {
    console.log(tickets[i].custom_fields)


    if (userTickets[tickets[i].owner_id] && userTickets[tickets[i].owner_id].open || userTickets[tickets[i].owner_id] && userTickets[tickets[i].owner_id].inwork || userTickets[tickets[i].owner_id] && userTickets[tickets[i].owner_id].waiting) {
      userTickets[tickets[i].owner_id].ticketCount += 1

      switch (tickets[i].status_id) {
        case "open":
          userTickets[tickets[i].owner_id].open += 1
          break;
        case "v-processe":
          userTickets[tickets[i].owner_id].inwork += 1
          break;
        case "6":
          userTickets[tickets[i].owner_id].waiting += 1
          break;
        
        }
    } else {
      if (userTickets[tickets[i].owner_id]) {
        userTickets[tickets[i].owner_id].ticketCount = 1
     
      switch (tickets[i].status_id) {
        case "open":
          userTickets[tickets[i].owner_id].open = 1
          break;
        case "v-processe":
          userTickets[tickets[i].owner_id].inwork = 1
          break;
        case "6":
          userTickets[tickets[i].owner_id].waiting = 1
          break;
        
        }
      }
    }

  }
  userTicketsGrafana += `
# TYPE hde_tickets_info counter`

  //–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ
  for (let key in userTickets) {

    if (userTickets[key]) {
      userTicketsGrafana +=
`
helpdeskeddy_tickets_info{status="–ù–æ–≤–∞—è", id="${userTickets[key].name}", online="${userTickets[key].user_status}"} ${userTickets[key].open}
helpdeskeddy_tickets_info{status="–í —Ä–∞–±–æ—Ç–µ", id="${userTickets[key].name}", online="${userTickets[key].user_status}"} ${userTickets[key].inwork}
helpdeskeddy_tickets_info{status="–í –æ–∂–∏–¥–∞–Ω–∏–∏", id="${userTickets[key].name}", online="${userTickets[key].user_status}"} ${userTickets[key].waiting}`;
    }

  }

  userTicketsGrafana += `\n`

  var requestOptions = {
    method: 'POST',
    body: userTicketsGrafana
  };
  // fetch("http://dn-adm-ent-prom-01.node.dtln-nord-ent.consul:9091/metrics/job/hde_ticket_job/instance/dn-app-ent-support-01", requestOptions)
  //   .then(response => response.text())
  //   .catch(error => console.log('error', error));

}

main();